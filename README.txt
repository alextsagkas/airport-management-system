Παρακάτω αναφέρονται τα βήματα που έχουν υλοποιηθεί στην εργασία:

1. Η οργάνωση έχει γίνει σε ενότητες. Αναλυτικότερα, η ενότητα  rbt περιέχει όλη την 
λειτουργικότητα για τον χειριμό Red Black Trees (RBT). Οι δύο άλλες ενότητες int και string 
αναφέρονται στην υλοποίηση των generic keys στα nodes του δέντρου. Η πρώτη περιέχει την 
λειτουργικότητα για χειρισμό int keys, ενώ η δεύτερη για string keys.

2. Οι καλές πρακτικές υλοποίησης ενοτήτων έχουν χρησιμοποιηθεί εκτενώς σε όλη την έκταση του 
codebase. Συγκεκριμένα, έχουν χρησιμοποιηθεί τα παρακάτω, με την αρίθμηση που υπάρχει και στις 
διαφάνειες:
    1. Διαχωρισμός διεπαφής και υλοποίησης με τη χρήση των header files. Αυτά περιέχουν μόνο όσες 
    συναρτήσεις χρειάζεται ο χρήστης για να χειριστεί την οντότητα που πραγματέυεται η ενότητα και 
    όχι τις λεπτομέρεις υλοποίησης.
    3. Διαχείρηση πόρων με συνέπεια. Συγκεκριμένα, τα malloc και free γίνονται είτε στην ενότητα, 
    είτε στην main με καλά ορισμένες διεπαφές. Η πρώτη περίπτωση αφορά την ενότητα rbt, ενώ η 
    δεύτερη τις δύο ενότητες με τα keys (int και string).
    4. Καλή επιλογή ονομάτων μεταβλητών και συναρτήσεων. Η κάθε ανότητα "προσθέτει" ένα πρόθεμα 
    στις συναρτήσεις που τις ανήκουν.
    5. Χρήση των ελάχιστον δυνατών συναρτήσεων στη διέπαφη με τον χρήστη.
    6. Οι συναρτήσεις αναφέρουν λάθη μέσω των τιμών που επιστρέφουν. Τα συμβόλαια που
    θέτουν με τον χρήστη για το τι συμβολίζει η κάθε τιμή φαίνονται στα σχόλια των header files.
    7. Οι ενότητες εγκαθιδρύουν συμβόλαια με το χρήση μέσω των σχολιών στα header files.
    Συγκερκιμένα, αναφέρεται μία σύντομη περιγραφή (descritpion) της λειτουργικότητα κάθε 
    συνάρτησης, τι συμβολίζουν οι παράμετροι (parameters) που δέχεται στην είσοδο και τι επιστρέφει 
    στην έξοδο (return value(s)). Επιπλέον, εάν χρησιμοποιείται assert τότε αναφέρεται και η 
    σηνθήκη που ελέγχεται.
    8. Οι συναρτήσεις μιας συγκεκριμένης ενότητας έχουν υψηλή συνάφεια μεταξύ τους.
    9. Υπάρχει ασθενής εξάρτηση μεταξύ ενοτήτων. Αυτό διαφένεται από το ότι δεν απαιτείται
    να χρησιμοποιηθεί λειτουργικότητα κάποιας άλλης ενότητας για να υλοποιηθεί μία συγκεκριμένη.
    Ωστόσο, για να υπάρξει επικοινωνία μεταξύ ενοτήτων, τα συμβόλαια που πρέπει να τηρούνται
    εκφράζονται αναλυτικά στα σχόλια των header files.

3. Έχει γίνει αφαίρεση του τύπου key που χρησιμοποιούν τα nodes του RBT. Συγκεκριμένα, η δημιουργία
και η καταστροφή των κλειδιών γίνεται με δύο συναρτήσεις, τις create_key και delete_key. Επίσης,
οι πράξεις σύγκρισης έχουν συγκεντρωθεί σε μία συνάρτηση, την compare, η οποία επιστρέφει μία 
int τιμή ανάλογα με το εάν το πρώτο της όρισμα είναι μεγαλύτερο, μικρότερο ή ίσο με το δεύτερο. 
Τέλος, η τύπωση των κλειδιών γίνεται με την χρήση της συνάρτησης print. Για να χρησιμοποιηθεί
αυτή η λειτουργικότητα από την ενότητα του RBT, σε όποιες συναρτήσεις της χρειάζεται, έχει προστεθεί
σαν επιπλέον παράμετρος δείκτης σε συνάρτηση.

4. Το codebase είναι υλοποιημένο με τη χρήση της ολικής απόκρυψης (encapsulation). Συγκεκριμένα, ο 
χρήστης επικοινωνεί με κάθε ενότητα μόνο μέσω ενός typedef σε struct της ενότητας και δεν έχει 
άμεση πρόσβαση στα στοιχεία του.

5. Το genericity υποστηρίζεται μέσω της χρήσης των void pointers στις παραμέτρους των συναρτήσεων.

Σημειώσεις:

- Τα αρχεία scaffold_int.c και scaffold_string.c χρησιμοποιήθηκαν για την απομονωμένη εξέταση
των ενοτήτων string και int, αντίστοιχα. Ύστερα, μετονομάστηκε η συνάρτηση που περιέχει το καθένα 
διαφορετικά από main() ώστε όταν γίνεται compile & run στο Dev-C++ και να τρέχει μόνο το
scaffold_rbt.c. Ωστόσο, τα συμπεριέλαβα στην εργασία σε περίπτωση που θέλατε να τα ελέγξετε.
- Ο υπολογιστής που χρησιμοποιήθηκε για την ανάπτυξη της εργασίας είχε λειτουργικό macOS και 
επεξεργασστή με αρχιτεκτονική ARM. Ως αποτέλεσμα, το Dev-C++ project δημιουργήθηκε σε ένα 
emulated x86 Windows 11 περιβάλλον. Παρόλο που επιβεβαιώθηκε ότι δουλεύει κανονικά, εάν για κάποιο
λόγο δεν τρέχει στον υπολογιστή σας μη διστάσετε να επικοινωνήσετε μαζί μου (atsagk@phys.uoa.gr) με 
πληροφορίες για να το διορθώσω.